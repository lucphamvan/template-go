basePath: /
definitions:
  model.AuthenResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user:
        $ref: '#/definitions/model.User'
    type: object
  model.Choice:
    properties:
      content:
        type: string
      id:
        type: string
    required:
    - content
    - id
    type: object
  model.CreateAndInsertQuestionToQuizResponse:
    properties:
      question:
        $ref: '#/definitions/model.Question'
      quiz:
        $ref: '#/definitions/model.Quiz'
    type: object
  model.CreateQuestionInput:
    properties:
      choices:
        items:
          $ref: '#/definitions/model.Choice'
        minItems: 1
        type: array
      content:
        type: string
      correct_choice_ids:
        items:
          type: string
        minItems: 1
        type: array
      deleted:
        type: boolean
      owner_id:
        type: string
    required:
    - choices
    - content
    - correct_choice_ids
    type: object
  model.CreateQuizInput:
    properties:
      owner_id:
        type: string
      setting:
        $ref: '#/definitions/model.QuizSetting'
    required:
    - setting
    type: object
  model.CreateUserInput:
    properties:
      avatar:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    type: object
  model.GetListQuizzesResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/model.Quiz'
        type: array
      total:
        type: integer
    type: object
  model.ListQuestionResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/model.Question'
        type: array
      total:
        type: integer
    type: object
  model.ListUserResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/model.User'
        type: array
      total:
        type: integer
    type: object
  model.Question:
    properties:
      choices:
        items:
          $ref: '#/definitions/model.Choice'
        minItems: 1
        type: array
      content:
        type: string
      correct_choice_ids:
        items:
          type: string
        minItems: 1
        type: array
      created_at:
        type: number
      deleted:
        type: boolean
      id:
        type: string
      owner_id:
        type: string
    required:
    - choices
    - content
    - correct_choice_ids
    type: object
  model.Quiz:
    properties:
      code:
        type: string
      created_at:
        type: number
      deleted:
        type: boolean
      id:
        type: string
      owner_id:
        type: string
      published:
        type: boolean
      question_ids:
        items:
          type: string
        type: array
      setting:
        $ref: '#/definitions/model.QuizSetting'
    type: object
  model.QuizSetting:
    properties:
      allowed_emails:
        items:
          type: string
        type: array
      duration:
        type: integer
      end_time:
        type: number
      name:
        type: string
      start_time:
        type: number
    required:
    - duration
    - end_time
    - name
    - start_time
    type: object
  model.RefreshTokenRequest:
    properties:
      token:
        type: string
    type: object
  model.UpdateQuestionInput:
    properties:
      choices:
        items:
          $ref: '#/definitions/model.Choice'
        minItems: 1
        type: array
      content:
        type: string
      correct_choice_ids:
        items:
          type: string
        minItems: 1
        type: array
    required:
    - choices
    - content
    - correct_choice_ids
    type: object
  model.UpdateUserInput:
    properties:
      avatar:
        type: string
      email:
        type: string
      name:
        type: string
    required:
    - email
    type: object
  model.User:
    properties:
      avatar:
        type: string
      created_at:
        type: number
      email:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: number
    required:
    - email
    type: object
host: localhost:8000
info:
  contact:
    email: tchh.lucpham@gmail.com
    name: kul
  description: Document API server
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Kul API
  version: "1.0"
paths:
  /questions:
    get:
      consumes:
      - application/json
      description: get list questions with pagination
      parameters:
      - description: max number of questions per page
        in: query
        name: limit
        type: number
      - description: page offset
        in: query
        name: offset
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ListQuestionResponse'
        "400":
          description: Bad Request
      security:
      - BearerAuth: []
      summary: get list questions
      tags:
      - questions
    post:
      consumes:
      - application/json
      description: create question
      parameters:
      - description: request body
        in: body
        name: question
        required: true
        schema:
          $ref: '#/definitions/model.CreateQuestionInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Question'
        "400":
          description: Bad Request
      security:
      - BearerAuth: []
      summary: create question
      tags:
      - questions
  /questions/{id}:
    delete:
      consumes:
      - application/json
      description: delete question
      parameters:
      - description: question id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      security:
      - BearerAuth: []
      summary: delete question
      tags:
      - questions
    patch:
      consumes:
      - application/json
      description: update question
      parameters:
      - description: question id
        in: path
        name: id
        required: true
        type: string
      - description: request body
        in: body
        name: question
        required: true
        schema:
          $ref: '#/definitions/model.UpdateQuestionInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      security:
      - BearerAuth: []
      summary: update question
      tags:
      - questions
  /quizzes:
    get:
      consumes:
      - application/json
      description: get quizzes
      parameters:
      - description: limit
        in: query
        name: limit
        type: string
      - description: offset
        in: query
        name: offset
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetListQuizzesResponse'
        "400":
          description: Bad Request
      security:
      - BearerAuth: []
      summary: get quizzes
      tags:
      - quizzes
    post:
      consumes:
      - application/json
      description: create quiz
      parameters:
      - description: request body
        in: body
        name: quiz
        required: true
        schema:
          $ref: '#/definitions/model.CreateQuizInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Quiz'
        "400":
          description: Bad Request
      security:
      - BearerAuth: []
      summary: create quiz
      tags:
      - quizzes
  /quizzes/{id}/insert-question:
    patch:
      consumes:
      - application/json
      description: create and insert question to quiz
      parameters:
      - description: quiz id
        in: path
        name: id
        required: true
        type: string
      - description: request body
        in: body
        name: question
        required: true
        schema:
          $ref: '#/definitions/model.CreateQuestionInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CreateAndInsertQuestionToQuizResponse'
        "400":
          description: Bad Request
      security:
      - BearerAuth: []
      summary: create and insert question to quiz
      tags:
      - quizzes
  /quizzes/{id}/publish:
    patch:
      consumes:
      - application/json
      description: publish quiz
      parameters:
      - description: quiz id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Quiz'
        "400":
          description: Bad Request
      security:
      - BearerAuth: []
      summary: publish quiz
      tags:
      - quizzes
  /quizzes/{id}/questions:
    get:
      consumes:
      - application/json
      description: get question of quiz
      parameters:
      - description: quiz id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Question'
            type: array
        "400":
          description: Bad Request
      security:
      - BearerAuth: []
      summary: get question of quiz
      tags:
      - quizzes
  /quizzes/{id}/remove-question/{questionId}:
    delete:
      consumes:
      - application/json
      description: remove question from quiz
      parameters:
      - description: quiz id
        in: path
        name: id
        required: true
        type: string
      - description: question id
        in: path
        name: questionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Quiz'
        "400":
          description: Bad Request
      security:
      - BearerAuth: []
      summary: remove question from quiz
      tags:
      - quizzes
  /token/refresh:
    post:
      consumes:
      - application/json
      parameters:
      - description: token
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/model.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "401":
          description: Unauthorized
      summary: refresh token
      tags:
      - users
  /users:
    get:
      consumes:
      - application/json
      description: get list user with pagination
      parameters:
      - description: max number of user per page
        in: query
        name: limit
        type: number
      - description: page offset
        in: query
        name: offset
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ListUserResponse'
        "400":
          description: Bad Request
      security:
      - BearerAuth: []
      summary: get list user
      tags:
      - users
    post:
      consumes:
      - application/json
      description: create user
      parameters:
      - description: request body
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.CreateUserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
      summary: create user
      tags:
      - users
  /users/{id}:
    get:
      consumes:
      - application/json
      description: get user by id
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
      security:
      - BearerAuth: []
      summary: get user by id
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: update user
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: string
      - description: body data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UpdateUserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
      security:
      - BearerAuth: []
      summary: update user
      tags:
      - users
  /users/check:
    get:
      consumes:
      - application/json
      description: check user exist or not
      parameters:
      - description: user email
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
      summary: check user exist or not
      tags:
      - users
  /users/login:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AuthenResponse'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
      - basicAuth: []
      summary: Login to system
      tags:
      - users
  /users/me:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "401":
          description: Unauthorized
      security:
      - BearerAuth: []
      summary: Get access's information
      tags:
      - users
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
